service: contract-events-monitoring

provider:
  name: aws
  runtime: nodejs12.x
  profile: oz-sam-test
  region: us-east-2
  environment:
    NODE_ENV: dev
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-plugin-typescript 
  - serverless-offline
  - serverless-webpack
  - serverless-s3-sync

functions:
  testEmail:
    handler: lambdas/testEmail.send
    events:
      - http:
          path: test
          method: post
          
  getLatestEventsAndProcess:
    handler: lambdas/web3.getLatestEventsAndProcess
    events:
      # Invoke Lambda function every 5 minutes
      - schedule: rate(5 minute)
      
  create:
    handler: lambdas/contract.create
    events:
      - http:
          path: contracts
          method: post
  list:
    handler: lambdas/contract.list
    events:
      - http:
          path: contracts
          method: get
  get:
    handler: lambdas/contract.get
    events:
      - http:
          path: contracts/{id}
          method: get
  update:
    handler: lambdas/contract.update
    events:
      - http:
        path: contracts/{id}
        method: put
  delete:
    handler: lambdas/contract.delete
    events:
      - http:
          path: contracts/{id}
          method: delete

resources:
  Resources:
    SvelteUIBucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        AccessControl: 'PublicRead'
        BucketName: 'oz-code-challenge-svelte-ui'
        WebsiteConfiguration:
          IndexDocument: 'index.html'
    
    ContractsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        
    # EmailService:
    #   Type: 'AWS::SES'
        